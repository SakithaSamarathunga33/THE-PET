import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { FiUser, FiCalendar, FiClock, FiDollarSign, FiFileText, FiLogOut, FiHome, FiMenu, FiPlus, FiBriefcase, FiMail, FiPhone, FiMapPin, FiChevronRight, FiSettings, FiAlertCircle, FiSend } from 'react-icons/fi';
import Link from 'next/link';
import Head from 'next/head';

const EmployeePage = () => {
  const router = useRouter();
  const [employee, setEmployee] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [username, setUsername] = useState('');
  const [showUserMenu, setShowUserMenu] = useState(false);
  
  const [leaveError, setLeaveError] = useState('');
  const [leaveSuccess, setLeaveSuccess] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const [leaveRequest, setLeaveRequest] = useState({
    type: '',
    startDate: '',
    endDate: '',
    reason: ''
  });

  useEffect(() => {
    const token = localStorage.getItem('token');
    const userType = localStorage.getItem('userType');
    const employeeId = localStorage.getItem('employeeId');
    const storedUsername = localStorage.getItem('username');

    if (storedUsername) {
      setUsername(storedUsername);
    }

    if (!token || userType !== 'employee' || !employeeId) {
      router.push('/login');
      return;
    }

    // Check if token is valid
    validateToken(token, employeeId);
  }, [router]);

  // Add token validation function
  const validateToken = async (token, employeeId) => {
    try {
      // Make a simple request to verify token validity
      const response = await fetch('http://localhost:8080/api/auth/me', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        // If token is invalid, clear it and redirect to login
        localStorage.removeItem('token');
        router.push('/login');
        return;
      }

      // If token is valid, fetch employee data
      fetchEmployeeData(employeeId);
    } catch (error) {
      console.error('Error validating token:', error);
      router.push('/login');
    }
  };

  const fetchEmployeeData = async (employeeId) => {
    try {
      setLoading(true);
      setError(null);
      const token = localStorage.getItem('token');
      if (!token) {
        router.push('/login');
        return;
      }

      const response = await fetch(`http://localhost:8080/api/employees/${employeeId || 'me'}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });

      // Check if the response is a redirect or auth error
      if (response.status === 401 || response.status === 403) {
        // Token expired or invalid
        localStorage.removeItem('token');
        router.push('/login');
        return;
      }

      if (!response.ok) {
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.indexOf('application/json') !== -1) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to fetch employee data');
        } else {
          throw new Error('Invalid server response. Please refresh the page.');
        }
      }

      const data = await response.json();
      console.log('Employee data:', data); // For debugging
      setEmployee(data);
    } catch (error) {
      console.error('Error fetching employee data:', error);
      setError(error.message || 'Failed to fetch employee data');
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = async () => {
    try {
      localStorage.removeItem('token');
      localStorage.removeItem('username');
      localStorage.removeItem('email');
      localStorage.removeItem('userType');
      localStorage.removeItem('employeeId');
      sessionStorage.clear();
      router.push('/login');
    } catch (error) {
      console.error("Logout error:", error);
    }
  };

  const handleLeaveSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setLeaveError('');
    setLeaveSuccess(null);

    try {
      // Validate dates
      const startDate = new Date(leaveRequest.startDate);
      const endDate = new Date(leaveRequest.endDate);
      
      if (startDate > endDate) {
        throw new Error('Start date cannot be after the end date');
      }
      
      if (startDate < new Date()) {
        throw new Error('Start date cannot be in the past');
      }

      const token = localStorage.getItem('token');
      if (!token) {
        router.push('/login');
        return;
      }

      // First, verify the token is still valid
      const checkTokenResponse = await fetch('http://localhost:8080/api/auth/me', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });

      if (!checkTokenResponse.ok) {
        // Token is invalid, redirect to login
        localStorage.removeItem('token');
        router.push('/login');
        return;
      }

      const response = await fetch(`http://localhost:8080/api/employees/${employee._id}/leave`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(leaveRequest)
      });

      // Check response type before trying to parse as JSON
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.indexOf('application/json') === -1) {
        // Not JSON response - likely an auth error or server error
        if (response.status === 401 || response.status === 403) {
          localStorage.removeItem('token');
          router.push('/login');
          return;
        }
        throw new Error('Invalid server response. You may be logged out. Please refresh the page and try again.');
      }

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || data.error || 'Failed to submit leave request');
      }

      setLeaveSuccess('Leave request submitted successfully!');
      // Reset form
      setLeaveRequest({
        type: '',
        startDate: '',
        endDate: '',
        reason: ''
      });
      
      // Fetch updated data
      fetchEmployeeData(employee._id);
    } catch (error) {
      console.error('Error submitting leave request:', error);
      setLeaveError(error.message || 'Failed to submit leave request');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="flex flex-col items-center">
          <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-[#4DB6AC]"></div>
          <p className="mt-4 text-gray-600 font-medium">Loading your profile...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="bg-white p-8 rounded-lg shadow-lg max-w-md w-full">
          <div className="flex items-center justify-center text-red-500 mb-4">
            <FiAlertCircle className="w-12 h-12" />
          </div>
          <h2 className="text-2xl font-bold text-center text-gray-800 mb-2">Error</h2>
          <p className="text-center text-gray-600">{error}</p>
          <button 
            onClick={() => router.push('/login')}
            className="mt-6 w-full py-2 px-4 bg-[#4DB6AC] hover:bg-[#4DB6AC]/90 text-white font-medium rounded-lg"
          >
            Return to Login
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-teal-50 to-cyan-50">
      <Head>
        <title>Employee Dashboard</title>
      </Head>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Page Title with Logout Button */}
        <div className="mb-8 flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Employee Dashboard</h1>
            <p className="mt-2 text-gray-600">Welcome back, {employee?.name}</p>
          </div>
          <button
            onClick={handleLogout}
            className="flex items-center px-4 py-2 bg-gradient-to-r from-red-500 to-orange-500 hover:from-red-600 hover:to-orange-600 text-white rounded-lg transition-colors duration-300 shadow-md"
            title="Logout"
          >
            <FiLogOut className="mr-2" />
            <span>Logout</span>
          </button>
        </div>

        {/* Employee Profile Card */}
        <div className="bg-white rounded-xl shadow-lg overflow-hidden mb-8 border border-gray-100">
          <div className="md:flex">
            <div className="md:flex-shrink-0 bg-gradient-to-r from-teal-400 to-cyan-500 p-6 flex items-center justify-center">
              <div className="h-24 w-24 rounded-full bg-white/20 flex items-center justify-center backdrop-blur-sm shadow-inner">
                <FiUser className="h-12 w-12 text-white" />
              </div>
            </div>
            <div className="p-6 md:p-8 w-full">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between">
                <div>
                  <h2 className="text-2xl font-bold text-gray-900">{employee?.name}</h2>
                  <p className="text-lg text-gray-600">{employee?.role}</p>
                  
                  <div className="mt-2 flex flex-wrap gap-2">
                    <div className="flex items-center text-gray-600">
                      <FiMail className="mr-1 h-4 w-4" />
                      <span className="text-sm">{employee?.email}</span>
                    </div>
                    <div className="flex items-center text-gray-600">
                      <FiPhone className="mr-1 h-4 w-4" />
                      <span className="text-sm">{employee?.phoneNumber}</span>
                    </div>
                  </div>
                </div>
                
                <div className="mt-4 md:mt-0">
                  <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                    employee?.status === 'Active'
                      ? 'bg-emerald-100 text-emerald-800 border border-emerald-200'
                      : employee?.status === 'On Leave'
                      ? 'bg-amber-100 text-amber-800 border border-amber-200'
                      : 'bg-rose-100 text-rose-800 border border-rose-200'
                  }`}>
                    <span className={`h-2 w-2 rounded-full mr-1 ${
                      employee?.status === 'Active'
                        ? 'bg-emerald-500'
                        : employee?.status === 'On Leave'
                        ? 'bg-amber-500'
                        : 'bg-rose-500'
                    }`}></span>
                    {employee?.status}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Main Grid Layout for Dashboard Sections */}
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
          {/* Left Column */}
          <div className="lg:col-span-7 space-y-8">
            {/* Leave Management Section */}
            <div className="bg-white rounded-xl shadow-md overflow-hidden border border-gray-100">
              <div className="px-6 py-5 border-b border-gray-100 bg-gradient-to-r from-sky-50 to-indigo-50 flex items-center justify-between">
                <h3 className="text-xl font-semibold text-gray-800 flex items-center">
                  <FiCalendar className="mr-2 text-sky-500" />
                  Leave Management
                </h3>
                <span className="bg-sky-100 text-sky-800 text-xs font-medium px-2.5 py-1 rounded-full border border-sky-200">
                  {employee?.leaves ? (20 - employee.leaves.filter(leave => leave.approved || leave.status === 'approved').length) : 20} days remaining
                </span>
              </div>
              
              <div className="p-6">
                {/* Success and Error Messages */}
                {leaveSuccess && (
                  <div className="mb-4 p-4 bg-emerald-50 border border-emerald-200 rounded-lg text-emerald-700 flex items-start">
                    <div className="flex-shrink-0 mr-2">
                      <svg className="h-5 w-5 text-emerald-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <div>
                      <p className="font-medium">{leaveSuccess}</p>
                    </div>
                  </div>
                )}

                {leaveError && (
                  <div className="mb-4 p-4 bg-rose-50 border border-rose-200 rounded-lg text-rose-700 flex items-start">
                    <div className="flex-shrink-0 mr-2">
                      <svg className="h-5 w-5 text-rose-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <div>
                      <p className="font-medium">{leaveError}</p>
                    </div>
                  </div>
                )}

                {/* Leave Request Form */}
                <form onSubmit={handleLeaveSubmit} className="mb-6">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                      <input
                        type="date"
                        name="startDate"
                        value={leaveRequest.startDate}
                        onChange={(e) => setLeaveRequest({...leaveRequest, startDate: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-sky-500 focus:border-sky-500 shadow-sm"
                        required
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                      <input
                        type="date"
                        name="endDate"
                        value={leaveRequest.endDate}
                        onChange={(e) => setLeaveRequest({...leaveRequest, endDate: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-sky-500 focus:border-sky-500 shadow-sm"
                        required
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Type</label>
                      <select
                        name="type"
                        value={leaveRequest.type}
                        onChange={(e) => setLeaveRequest({...leaveRequest, type: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-sky-500 focus:border-sky-500 shadow-sm"
                        required
                      >
                        <option value="">Select type</option>
                        <option value="Annual">Annual Leave</option>
                        <option value="Sick">Sick Leave</option>
                        <option value="Personal">Personal Leave</option>
                      </select>
                    </div>
                  </div>
                  
                  <div className="mt-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Reason</label>
                    <textarea
                      name="reason"
                      value={leaveRequest.reason}
                      onChange={(e) => setLeaveRequest({...leaveRequest, reason: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-sky-500 focus:border-sky-500 shadow-sm"
                      rows="2"
                      required
                    ></textarea>
                  </div>
                  
                  <div className="mt-4 flex justify-end">
                    <button
                      type="submit"
                      className="px-4 py-2 bg-gradient-to-r from-sky-500 to-indigo-500 hover:from-sky-600 hover:to-indigo-600 text-white rounded-lg shadow-sm transition-colors duration-300 flex items-center"
                      disabled={isSubmitting}
                    >
                      {isSubmitting ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Submitting...
                        </>
                      ) : (
                        <>
                          <FiSend className="mr-2" />
                          Submit Request
                        </>
                      )}
                    </button>
                  </div>
                </form>
                
                {/* Leave Requests Table */}
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200 rounded-lg overflow-hidden">
                    <thead>
                      <tr>
                        <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date Range</th>
                        <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {employee?.leaves?.length > 0 ? (
                        employee.leaves.map((leave, index) => (
                          <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                            <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                              <span className="font-medium">{new Date(leave.startDate).toLocaleDateString()}</span>
                              {" to "}
                              <span className="font-medium">{new Date(leave.endDate).toLocaleDateString()}</span>
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap">
                              <span className="px-2 py-1 text-xs rounded-full bg-gray-100 text-gray-800 font-medium">
                                {leave.type}
                              </span>
                            </td>
                            <td className="px-4 py-3 whitespace-nowrap">
                              <span className={`px-2 py-1 text-xs rounded-full font-medium ${
                                leave.status === 'approved' || leave.approved 
                                  ? 'bg-emerald-100 text-emerald-800 border border-emerald-200' 
                                  : leave.status === 'rejected' || leave.rejected 
                                  ? 'bg-rose-100 text-rose-800 border border-rose-200'
                                  : 'bg-amber-100 text-amber-800 border border-amber-200'
                              }`}>
                                {leave.status === 'approved' || leave.approved 
                                  ? 'Approved' 
                                  : leave.status === 'rejected' || leave.rejected
                                  ? 'Rejected'
                                  : 'Pending'}
                                {leave.paid && (leave.status === 'approved' || leave.approved) && (
                                  <span className="ml-1 px-1.5 py-0.5 bg-blue-100 text-blue-800 text-xs rounded">Paid</span>
                                )}
                              </span>
                            </td>
                          </tr>
                        ))
                      ) : (
                        <tr>
                          <td colSpan="3" className="px-4 py-4 text-center text-sm text-gray-500">
                            No leave requests found
                          </td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
          
          {/* Right Column */}
          <div className="lg:col-span-5 space-y-8">
            {/* Salary Information Card - Enhanced */}
            <div className="bg-white rounded-xl shadow-md overflow-hidden border border-gray-100">
              <div className="px-6 py-5 border-b border-gray-100 bg-gradient-to-r from-sky-50 to-indigo-50">
                <h3 className="text-xl font-semibold text-gray-800 flex items-center">
                  <FiDollarSign className="mr-2 text-sky-500" />
                  Salary Information
                </h3>
              </div>
              
              <div className="p-6">
                <div className="grid grid-cols-2 gap-6 mb-6">
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h4 className="text-sm text-gray-500 mb-1">Base Salary</h4>
                    <p className="text-2xl font-bold text-gray-800">
                      ${employee?.baseSalary ? employee.baseSalary.toLocaleString() : 'N/A'}
                    </p>
                  </div>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h4 className="text-sm text-gray-500 mb-1">Hourly Rate</h4>
                    <p className="text-xl font-semibold text-gray-800">
                      ${employee?.hourlyRate ? employee.hourlyRate.toLocaleString() : 'N/A'}/hr
                    </p>
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-6">
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h4 className="text-sm text-gray-500 mb-1">Monthly Salary</h4>
                    <p className="text-xl font-semibold text-gray-800">
                      ${employee?.calculatedSalary ? employee.calculatedSalary.toLocaleString() : (employee?.baseSalary ? employee.baseSalary.toLocaleString() : 'N/A')}
                    </p>
                    <p className="text-xs text-gray-500 mt-1">Updated: {employee?.updatedAt ? new Date(employee.updatedAt).toLocaleDateString() : 'N/A'}</p>
                  </div>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h4 className="text-sm text-gray-500 mb-1">Working Details</h4>
                    <p className="text-md font-medium text-gray-800">{employee?.workingHoursPerDay || '8'} hrs/day</p>
                    <p className="text-md font-medium text-gray-800 mt-1">{employee?.leaves?.filter(leave => leave.approved || leave.status === 'approved').length || 0} days leave taken</p>
                  </div>
                </div>
                
                <div className="mt-6 pt-4 border-t border-gray-100">
                  <div className="flex justify-between items-center mb-2">
                    <h4 className="font-medium text-gray-800">Recent Salary Updates</h4>
                    <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">Auto-synced</span>
                  </div>
                  <p className="text-sm text-gray-600">
                    Your salary is calculated based on your base pay, working hours, and approved leave requests. Overtime and bonuses will be reflected in the monthly calculation.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EmployeePage;
